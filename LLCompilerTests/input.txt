(defun rvrs (l1 l2)
  (cond
    ((null l1) l2)
    (T (cons (car l1) l2))
  ))

(defun apnd (L1 L2) (rvrs (rvrs L1 nil) L2))

(defun appnd(L1 L2)
  (cond
    ((null L1) L2)
    (T (cons (car L1) (appnd (cdr L1) L2)))
  )
)

(defun atomsnoappend (h)
  (cond
    ((null L) nil)
    ((atom L) L)
    ((atom (car L)) (cons (car L) (atomsnoappend (cdr L))))
    (T (atomsnoappend (cons (car (car L)) (cons (cdr (car L)) (cdr L)))))
  )
)

(defun atoms (h)
  (cond
    ((null L) nil)
    ((atom L) L)
    ((atom (car L)) (cons (car L) (atoms (cdr L))))
    (T (append (atoms (car L)) (atoms (cdr L))))
  ))

(defun equall (L1 L2)
  (cond
    ((null L1) (null L2))
    ((null L2) (null L1))
    ((atom L1) (cond ((atom L2) (eql L1 L2)) (T nil)))
    ((atom L2) (cond ((atom L1) (eql L1 L2)) (T nil)))
    ((equall (car L1) (car L2)) (equall (cdr L1) (cdr L2)))
    (T nil)
  ))


(defun sq (A L)
  (cond
    ((null L) nil)
    (T (append (list (cons A (car L)) (append (car L) (list A))) (sq A (cdr L))))
  )
)

(defun permut (h)
  (cond
    ((null L) nil)
    ((null (cdr L)) (list L))
    (T (sq (car L) (permut (cdr L))))
  )
)

(defun qLG (A L F) (remove-if-not (lambda (x) (funcall F x A)) L))
(defun qLE (A L F) (remove-if     (lambda (x) (funcall F x A)) L))

(defun qqsort (L F)
  (cond
    ((null L) nil)
    (T (append
         (qqsort (qLG (car L) (cdr L) F) F)
         (list (car L))
         (qqsort (qLE (car L) (cdr L) F) F)
    ))
))

(defun qsrt (L F)
  (cond
    ((null L) nil)
    (T (append
         (qsrt (remove-if-not (lambda (x) (funcall F x (car L))) (cdr L)) F)
         (cons (car L) nil)
         (qsrt (remove-if (lambda (x) (funcall F x (car L))) (cdr L)) F)
        ))
  )
)

(defun revl (h)
  (cond
    ((null L) nil)
    ((null (cdr L)) L)
    (T (atomsnoappend (cons (revl (cdr L)) (cons (car L) nil))))
  )
)

(defun rna (h)
  (cond
    ((null L) nil)
    ((null (cdr L)) L)
    (T (cons (car (rna (cdr L))) (rna (cons (car L) (cdr (rna (cdr L)))))))
  )
)
